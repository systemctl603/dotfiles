#+AUTHOR: systemctl603 
#+PROPERTY: header-args :tangle yes

* Emacs configuration
** Style
The keymaps are mostly inspired (copied) from [[https://github.com/hlissner/doom-emacs][doom-emacs]]. 
The naming scheme for functions is: 
#+begin_quote 
{module}:{description} 
#+end_quote 

Personal functions: 
#+begin_quote 
func:{description} 
#+end_quote 

One other axiom in this config is that many packages that start a global mode 
are deferred to =window-setup-hook= to prevent a slow start.
** Config
This is an emacs config designed around =evil=,
and aiming to provide features similar to modern editors, 
like VSCode using packages like =lsp-mode=. 

Enable lexical scoping. 
#+BEGIN_SRC emacs-lisp 
;;; -*- lexical-binding: t -*- 
#+END_SRC 

Add important dirs to =load-path= 
#+BEGIN_SRC emacs-lisp 
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory)) 
#+END_SRC 

Set and load the custom file. 
#+BEGIN_SRC emacs-lisp 
(setq custom-file (expand-file-name "custom.el" user-emacs-directory)) 
#+END_SRC 
*** Packages
Set up =straight.el= and =use-package=. 
#+BEGIN_SRC emacs-lisp 
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+END_SRC 

**** Editing 
***** Evil
Configure =evil-mode=. Comment this section out and the keybinds section to use =emacs= bindings. 
#+BEGIN_SRC emacs-lisp 
(use-package 
  evil 
  :init 
  (setq evil-want-intergration t 
        evil-want-keybinding nil 
        evil-undo-system 'undo-fu)
  :hook (window-setup . evil-mode))
;; Configure `treemacs' to use `evil'
(use-package 
  treemacs-evil 
  :after treemacs)
#+END_SRC 
***** Yasnippet
Configure =yasnippet= for snippets. Also add a snippet library, namely =yasnippet-snippets=.
#+BEGIN_SRC emacs-lisp 
(use-package yasnippet 
  :defer t 
  :hook (prog-mode . yas-minor-mode)) 
(use-package yasnippet-snippets 
  :after yasnippet)
#+END_SRC 
***** Undo Fu
Use undo-fu for redo and undo.  Evil mode bindings are contained in
the keybindings section.
#+BEGIN_SRC emacs-lisp 
(use-package undo-fu
	:defer t)
#+END_SRC
**** Minibuffer 
Configure =ivy= for minibuffer completion 
Also use =ivy-rich= for richer completion 
#+BEGIN_SRC emacs-lisp 
(use-package 
  counsel 
  :hook (window-setup . counsel-mode))
(use-package 
  ivy 
  :after counsel 
  :config (ivy-mode t))
(use-package 
  ivy-rich 
  :after counsel 
  :config (ivy-rich-mode t))
#+END_SRC 
**** UI modules and tweaks 
Configure the theme to be =atom-one-dark-theme= 
#+BEGIN_SRC emacs-lisp 
(use-package atom-one-dark-theme
  :hook (after-init . (lambda () 
			(load-theme 'atom-one-dark t))))
#+END_SRC 

Resize the frame pixelwise 
#+begin_src emacs-lisp 
(setq frame-resize-pixelwise t)
#+end_src 
Configure [[https://github.com/seagle0128/doom-modeline][doom-modeline]] (A fancier modeline with support for =evil= and others) 
#+begin_src emacs-lisp 
(use-package 
  doom-modeline 
  :config (progn 
	    (setq doom-modeline-buffer-file-name-style 'file-name
						doom-modeline-major-mode-icon nil)
	    (doom-modeline-mode t)
			;; Disable some sections in the modeline
			(line-number-mode nil)))
#+end_src
Configure [[https://github.com/Alexander-Miller/treemacs][treemacs]], A tree file explorer with icons.
Also load a custom theme (icons from [[https://github.com/PKief/vscode-material-icon-theme][vscode-material-icons-theme]])
#+begin_src emacs-lisp 
(use-package 
  treemacs 
  :config (load-file (expand-file-name "lisp/treemacs-theme/theme.el" user-emacs-directory))
  :commands (treemacs))
#+end_src
**** Org
***** Org bullets
Install =org-bullets= to replace the typical s
***** Miscellanous configs
Add some customizations to =org-mode=. 
#+begin_src emacs-lisp 
(setq org-src-tab-acts-natively t
      org-startup-indented t
      org-hide-leading-stars t
      org-edit-src-content-indentation 0)
#+end_src 
**** Languages 
***** TS/JS + HTML + SCSS
Use =web-mode= for typescript and javascript.
Also enable it for some other modes too.
#+BEGIN_SRC emacs-lisp 
(use-package web-mode 
	:config
	(setq web-mode-content-types-alist
				'(("jsx" . "\\.js[x]?\\'")))
  :mode ("\\.tsx?\\'" "\\.html?\\'" "\\.s?css\\'" "\\.jsx?\\'"))
#+END_SRC 
=web-mode= isn't really used for anything else as intergration with
formatters and =lsp= is spotty at best
***** JSON
Use =json-mode= to edit json files 
#+BEGIN_SRC emacs-lisp 
(use-package json-mode 
  :defer t) 
#+END_SRC 
***** Dart + Flutter
Use =dart-mode= for syntax and indentation.
Also add some customization in font-lock.
#+BEGIN_SRC emacs-lisp 
(use-package dart-mode
	:config (progn
						(font-lock-add-keywords 'dart-mode
																		'((":" . font-lock-constant-face)
																		  ("\\(\\<\\|\\>\\)" . font-lock-constant-face))))
  :defer t)
#+END_SRC

Use =lsp-dart= to get LSP smarts in =dart=.
#+BEGIN_SRC emacs-lisp 
(use-package lsp-dart
  :defer t)
#+END_SRC
***** YAML
Use =yaml-mode= for editing yaml files
#+BEGIN_SRC emacs-lisp 
(use-package yaml-mode
  :defer t)
#+END_SRC
***** GraphQL
Install graphql support with graphql-mode
#+BEGIN_SRC emacs-lisp 
(use-package graphql-mode
	:defer t)
#+END_SRC
***** Nix
Install =nix-mode= to edit .nix files.
#+BEGIN_SRC emacs-lisp 
(use-package nix-mode
	:mode "\\.nix\\'")
#+END_SRC
***** Rust
#+BEGIN_SRC emacs-lisp 
(use-package rust-mode
	:defer t)
#+END_SRC
**** Programming packages
***** Language Server Protocol 
Install =lsp-mode= and =lsp-ui=. 
#+BEGIN_SRC emacs-lisp 
(use-package 
	lsp-mode 
	:hook ((web-mode
					dart-mode) . lsp-deferred))
(use-package 
	lsp-ui 
	:after lsp-mode 
	:config (progn 
						(setq lsp-ui-doc-enable t) 
						(setq lsp-ui-doc-include-signature t) 
						(setq lsp-ui-doc-alignment 'frame)
						(setq lsp-ui-doc-position 'at-point) 
						(setq lsp-ui-doc-delay 1.5)
						;; Disable `eldoc' in `lsp-ui'
						(setq lsp-eldoc-enable-hover nil) 
						(setq lsp-eldoc-hook nil)
						;; Configure path of angular language server.
						(setq lsp-clients-angular-language-server-command
									`("node"
										,(expand-file-name
											"~/.local/lib/node_modules/@angular/language-server")
										"--ngProbeLocations"
										,(expand-file-name
											"~/.local/lib/node_modules")
										"--tsProbeLocations"
										,(expand-file-name
											"~/.local/lib/node_modules")
										"--stdio"))
						(mapcar (lambda (f) (set-face-foreground f "dim gray"))
										'(lsp-ui-sideline-code-action
											lsp-ui-sideline-current-symbol
											lsp-ui-sideline-symbol
											lsp-ui-sideline-symbol-info))))
#+END_SRC 
***** Auto Completion
Install =company-mode= and add some customizations. 
#+BEGIN_SRC emacs-lisp 
(use-package 
	company
	:init (progn
					(setq company-minimum-prefix-length 1
								company-idle-delay 0.0
								company-auto-complete nil
								company-auto-complete-chars nil
								company-backends '((company-capf
																		company-files
																		company-dabbrev-code
																		company-dabbrev)))
					(add-hook 'text-mode-hook (lambda () (setq-local
																			company-backends
																			'(company-ispell))))) 
	:hook (window-setup . global-company-mode))
#+END_SRC 

Also use =company-box= for icons.  A small annoyance with the default
popup is that is makes the line numbers disappear on the right. This
package uses childframes, so the issue does not happen.
#+BEGIN_SRC emacs-lisp 
(use-package company-box
	:hook (company-mode . company-box-mode))
#+END_SRC
***** Flycheck
Install =flycheck=, but disable it for emacs-lisp since it
produces many false positives
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
  :config (progn
						(add-to-list 'flycheck-disabled-checkers '(emacs-lisp-checkdoc
																											 emacs-lisp)))
	:hook (prog-mode . flycheck-mode))
#+END_SRC
***** Formatting
Use =apheleia= to format code.
Also enable it on save for some modes where it is desired.
We also add/modify some formatters.
A macro (format:set) is provided to add a formatter with modes.
#+BEGIN_SRC emacs-lisp 
(use-package apheleia
	:straight '(apheleia :host github :repo "raxod502/apheleia")
	:hook (window-setup . apheleia-global-mode)
	:config (progn
						;; Modify prettier to use bracket spacing
						(setf (alist-get 'prettier apheleia-formatters)
									'(npx
										"prettier"
										"--bracket-spacing"
										"--stdin-filepath"
										filepath))

						;; Enable `dartfmt' for dart files.
						(setf (alist-get 'dartfmt apheleia-formatters)
									'("dart" "format" "--fix"))

						;; Add all the appropriate major modes for the appropriate
						;; formatters into `apheleia-mode-alist'
						(add-to-list 'apheleia-mode-alist '(dart-mode . dartfmt))
						(add-to-list 'apheleia-mode-alist '(graphql-mode . prettier))))
#+END_SRC
**** Version Control (Git) 
This section is geared toward vc, primarily git. 

Install and configure =magit=, the best git UI. 
#+BEGIN_SRC emacs-lisp 
(use-package magit 
  :commands magit-status) 
;; Configure `evil-magit' for evil bindings 
(use-package evil-magit 
  :after magit) 
#+END_SRC
**** Keybindings 
Define keybindings, using =general.el=. 
#+BEGIN_SRC emacs-lisp 
(use-package general 
	:config (progn
						;; Bindings to open and close dedicated buffers.
						(general-define-key :prefix "SPC o" 
																:keymaps 'normal 
																"t" #'treemacs
																;; `vterm'
																"v" #'vterm-toggle)

						(general-define-key :prefix "SPC o" 
																:keymaps 'treemacs-mode-map 
																:states 'treemacs 
																"t" #'treemacs)

						;; Add `treemacs' specific bindings
						(general-define-key :prefix "SPC p"
																:keymaps 'treemacs-mode-map 
																:states 'treemacs 
																"a" #'treemacs-add-project-to-workspace "d"
																#'treemacs-remove-project-from-workspace "r"
																#'treemacs-rename-project "j" #'treemacs-move-project-down "k"
																#'treemacs-move-project-up) ;; Add help bindings

						(general-define-key :prefix "SPC h" 
																:keymaps 'normal 
																"v" #'counsel-describe-variable "f" #'counsel-describe-function
																"k" #'counsel-descbinds)
						;; Define restart and exit bindings
						(general-define-key :prefix "SPC q" 
																:keymaps 'normal 
																"R" #'emacs:restart "q" #'kill-emacs)

						;; Allow for quick eval
						(general-define-key :prefix "SPC" 
																:keymaps 'normal 
																";" #'pp-eval-expression)

						(general-define-key :keymaps 'company-active-map
																"RET" nil
																"<tab>" #'company-complete-selection)
						;; Add debug keybindings
						(general-define-key :prefix "SPC d"
																:keymaps 'normal
																"t" #'dap-breakpoint-toggle
																"d" #'dap-debug
																"r a" #'dap-breakpoint-delete-all)))

;; Setup `evil-collection' for vim binding everywhere
(use-package 
		evil-collection 
	:after evil 
	:init (setq evil-collection-company-use-tng nil) 
	:config (evil-collection-init))
#+END_SRC 
**** Tools
***** esup 
Emacs startup profiler. Allows to see where slowdowns occur in startup. 
#+BEGIN_SRC emacs-lisp 
(use-package esup :commands esup) 
#+END_SRC 
***** Debugging 
Setup =dap-mode= for debugging. 
#+BEGIN_SRC emacs-lisp 
(use-package dap-mode :defer t) 
#+END_SRC 
***** Colorized Brackets 
The package =rainbow-brackets= provides a method to color brackets 
according to their depth. 
#+BEGIN_SRC emacs-lisp 
(use-package rainbow-delimiters :hook (prog-mode . rainbow-delimiters-mode)) 
#+END_SRC 
***** gcmh-mode
Use =gcmh-mode= to automatically adjust the gc thresholds.
#+BEGIN_SRC emacs-lisp 
(use-package gcmh
  :hook (window-setup . gcmh-mode))
#+END_SRC
***** VTerm
Install =emacs-libvterm= and defer loading untill
use of =vterm= command.
#+BEGIN_SRC emacs-lisp 
(use-package vterm
  :commands vterm)
#+END_SRC

Also install =vterm-toggle= to allow easy toggling
between current buffer and =vterm= buffer.
#+BEGIN_SRC emacs-lisp 
(use-package vterm-toggle
	:commands vterm-toggle)
#+END_SRC
***** exec-path-from-shell
Install exec-path-from-shell and initialize it.
#+BEGIN_SRC emacs-lisp 
(use-package exec-path-from-shell
	:hook (window-setup . exec-path-from-shell-initialize))
#+END_SRC
*** Functions
This section defines some helper functions.

Quickly add a src-block in =org-mode= 
#+begin_src emacs-lisp 
(defun org:add-src-block () 
  "Create a src block in org and enter special edit mode" 
  (interactive)
  (let ((ft (read-string "Enter language: "))) 
    (insert (format "#+BEGIN_SRC %s \n\n#+END_SRC" ft))
    (previous-line) 
    (org-edit-special)))
#+end_src 

Restart emacs from a command. 
#+BEGIN_SRC emacs-lisp 
;; Define functions to launch emacs again
(defun emacs:launch-in-terminal () 
  (suspend-emacs "fg ; emacs -nw"))
(defun emacs:launch-under-x () 
  (call-process "sh" nil nil nil "-c" "emacs &"))
(defun emacs:restart () 
  "Restart emacs" 
  (interactive)
  ;; We need the new emacs to be spawned after all kill-emacs-hooks
  ;; have been processed and there is nothing interesting left
  (let ((kill-emacs-hook (append kill-emacs-hook (list (if (display-graphic-p)
							   #'emacs:launch-under-x
							 #'emacs:launch-in-terminal))))) 
    (save-buffers-kill-emacs)))
#+END_SRC 
*** Miscellaneous Configurations
This section stores other configurations not related to the other sections. 

Customize scrolling to make it smoother and faster
#+BEGIN_SRC emacs-lisp 
(setq scroll-conservatively 101
      auto-window-vscroll nil) 
#+END_SRC 

Truncate long lines by default 
#+BEGIN_SRC emacs-lisp 
(setq-default truncate-lines t) 
#+END_SRC 

Enable =doom-modeline= icons if the daemon is in window mode.
#+BEGIN_SRC emacs-lisp 
(defun modeline:enable-icons (_frame)
  (setq doom-modeline-icon t))
  
(add-hook 'after-make-frame-functions 
          #'modeline:enable-icons)
#+END_SRC

Enable line numbers in all buffers.
#+BEGIN_SRC emacs-lisp 
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+END_SRC

Start =electric-pair-mode=. 
#+BEGIN_SRC emacs-lisp 
(add-hook 'window-setup-hook #'electric-pair-mode) 
#+END_SRC 

Highlight quoted symbols in =emacs-lisp-mode=. 
#+BEGIN_SRC emacs-lisp 
(add-hook 'emacs-lisp-mode-hook (lambda () 
				  (require 'highlight-quoted) 
				  (highlight-quoted-mode)))
#+END_SRC 

Start in the =scratch= buffer 
#+BEGIN_SRC emacs-lisp 
(setq inhibit-splash-screen t) 
#+END_SRC

Load the =custom-file= to get all the configs stored in it. 
#+BEGIN_SRC emacs-lisp 
(when (file-exists-p custom-file)
  (load-file custom-file))
#+END_SRC 

Change yes or no questions to y or n. 
#+BEGIN_SRC emacs-lisp 
(defalias 'yes-or-no-p 'y-or-n-p) 
#+END_SRC 

Increase the the amount of data read from a process to 1mb.  Can help
speed up =lsp-mode=.
#+BEGIN_SRC emacs-lisp 
(setq read-process-output-max (* 1024 1024))
#+END_SRC
*** After startup
After =gc-cons-threshold= is increased in =early-init.el=, we need to reset it
back to a sensible value. =gcmh-mode= does this for us. 
We also message the user about startup time, packages loaded, and gcs done. 
#+BEGIN_SRC emacs-lisp 
(add-hook 'window-setup-hook (lambda ()
			       (message "Emacs started in %s with %s packages and %s GCs"
					(emacs-init-time)
					(hash-table-size straight--profile-cache) gcs-done)))
#+END_SRC 
*** Script
#+BEGIN_SRC python :tangle app.py
print(f"aadsf {asdf}")
#+END_SRC
*** File Tangling
Tangling is done on save by helper functions, as tangling on startup
every time serves only to increase the init time. The local variables
here enable an auto tangle mechanism executed on save. By default, all
the source blocks are tangled. The =PROPERTY= attribute at the top of
the file.  To disable tangling, simply add =:tangle no= to the source
block.  
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
;; End:
